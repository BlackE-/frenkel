{"version":3,"sources":["src/script/files/helpers.js"],"names":["debounce","func","wait","scope","timeout","context","args","arguments","later","apply","clearTimeout","setTimeout","throttle","fn","threshhold","last","deferTimer","now","Date"],"mappings":"AAAA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,KAA9B,EAAqC;AACjC,MAAIC,OAAJ;AACA,SAAO,YAAY;AACf,QAAIC,OAAO,GAAGF,KAAK,IAAI,IAAvB;AAAA,QAA6BG,IAAI,GAAGC,SAApC;;AACA,QAAIC,KAAK,GAAG,SAARA,KAAQ,GAAY;AACpBJ,MAAAA,OAAO,GAAG,IAAV;AACAH,MAAAA,IAAI,CAACQ,KAAL,CAAWJ,OAAX,EAAoBC,IAApB;AACH,KAHD;;AAIAI,IAAAA,YAAY,CAACN,OAAD,CAAZ;AACAA,IAAAA,OAAO,GAAGO,UAAU,CAACH,KAAD,EAAQN,IAAR,CAApB;AACH,GARD;AASH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASU,QAAT,CAAkBC,EAAlB,EAAsBC,UAAtB,EAAkCX,KAAlC,EAAyC;AACrCW,EAAAA,UAAU,KAAKA,UAAU,GAAG,GAAlB,CAAV;AACA,MAAIC,IAAJ,EACIC,UADJ;AAEA,SAAO,YAAY;AACf,QAAIX,OAAO,GAAGF,KAAK,IAAI,IAAvB;AAEA,QAAIc,GAAG,GAAG,CAAC,IAAIC,IAAJ,EAAX;AAAA,QACIZ,IAAI,GAAGC,SADX;;AAEA,QAAIQ,IAAI,IAAIE,GAAG,GAAGF,IAAI,GAAGD,UAAzB,EAAqC;AACjC;AACAJ,MAAAA,YAAY,CAACM,UAAD,CAAZ;AACAA,MAAAA,UAAU,GAAGL,UAAU,CAAC,YAAY;AAChCI,QAAAA,IAAI,GAAGE,GAAP;AACAJ,QAAAA,EAAE,CAACJ,KAAH,CAASJ,OAAT,EAAkBC,IAAlB;AACH,OAHsB,EAGpBQ,UAHoB,CAAvB;AAIH,KAPD,MAOO;AACHC,MAAAA,IAAI,GAAGE,GAAP;AACAJ,MAAAA,EAAE,CAACJ,KAAH,CAASJ,OAAT,EAAkBC,IAAlB;AACH;AACJ,GAhBD;AAiBH","file":"helpers.9e00d86d.js","sourceRoot":"..","sourcesContent":["/**\r\n * Created by thephpjo on 21.04.14.\r\n */\r\n\r\n\r\n/**\r\n * debouncing, executes the function if there was no new event in $wait milliseconds\r\n * @param func\r\n * @param wait\r\n * @param scope\r\n * @returns {Function}\r\n */\r\nfunction debounce(func, wait, scope) {\r\n    var timeout;\r\n    return function () {\r\n        var context = scope || this, args = arguments;\r\n        var later = function () {\r\n            timeout = null;\r\n            func.apply(context, args);\r\n        };\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(later, wait);\r\n    };\r\n}\r\n\r\n/**\r\n * in case of a \"storm of events\", this executes once every $threshold\r\n * @param fn\r\n * @param threshhold\r\n * @param scope\r\n * @returns {Function}\r\n */\r\nfunction throttle(fn, threshhold, scope) {\r\n    threshhold || (threshhold = 250);\r\n    var last,\r\n        deferTimer;\r\n    return function () {\r\n        var context = scope || this;\r\n\r\n        var now = +new Date,\r\n            args = arguments;\r\n        if (last && now < last + threshhold) {\r\n            // hold on to it\r\n            clearTimeout(deferTimer);\r\n            deferTimer = setTimeout(function () {\r\n                last = now;\r\n                fn.apply(context, args);\r\n            }, threshhold);\r\n        } else {\r\n            last = now;\r\n            fn.apply(context, args);\r\n        }\r\n    };\r\n}"]}